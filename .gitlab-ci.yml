image: openjdk:11

variables:
  ANDROID_COMPILE_SDK: "30"
  ANDROID_BUILD_TOOLS: "30.0.3"
  ANDROID_SDK_TOOLS: "7583922"

before_script:
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1
  - wget --quiet --output-document=android-sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
  - unzip -d android-sdk-linux android-sdk.zip
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platforms;android-${ANDROID_COMPILE_SDK}" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "platform-tools" >/dev/null
  - echo y | android-sdk-linux/tools/bin/sdkmanager "build-tools;${ANDROID_BUILD_TOOLS}" >/dev/null
  - export ANDROID_HOME=$PWD/android-sdk-linux
  - export PATH=$PATH:$PWD/android-sdk-linux/platform-tools/
  - chmod +x ./gradlew
  # temporarily disable checking for EPIPE error and use yes to accept all licenses
  - set +o pipefail
  - yes | android-sdk-linux/tools/bin/sdkmanager --licenses
  - set -o pipefail

stages:
  - build
  - deploy

build:
  stage: build
  script:
#  Creating variable
    - export APP_VERSION=V.${CI_BUILD_TAG}
    - export FILE_NAME=app-$APP_VERSION.apk
    
#  Build apk
    - ./gradlew assembleRelease
    
#  Change file name
    - mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/$FILE_NAME
  artifacts:
    paths:
    - app/build/outputs/
  only:
    - master

deploy:
  stage: deploy
  script:
    - curl \
        -F token="${SLACK_CHANNEL_ACCESS_TOKEN}" \
        -F channels="${SLACK_CHANNEL_ID}" \
        -F initial_comment="Hello team! Here is the latest APK" \
        -F "file=@$(find app/build/outputs/apk/debug -name 'MyApp*')" \
        https://slack.com/api/files.upload
  artifacts:
    paths:
      - app/build/outputs/apk/release
  dependencies:
    - build
  only:
    - master
